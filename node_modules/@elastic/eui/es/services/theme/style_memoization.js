function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { createContext, useContext, useState, useMemo, useCallback, forwardRef } from 'react';
import { useUpdateEffect } from '../hooks';
import { useEuiTheme } from './hooks';
import { emitEuiProviderWarning } from './warning';

// Typically an object of serialized css`` styles, but can have any amount of nesting, so it's not worth it to try and strictly type this
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiThemeMemoizedStylesContext = /*#__PURE__*/createContext(new WeakMap());
export var EuiThemeMemoizedStylesProvider = function EuiThemeMemoizedStylesProvider(_ref) {
  var children = _ref.children;
  // Note: we *should not* use `useMemo` instead of `useState` here, as useMemo is not guaranteed
  // and its cache can get thrown away by React (https://react.dev/reference/react/useMemo#caveats)
  var _useState = useState(new WeakMap()),
    _useState2 = _slicedToArray(_useState, 2),
    componentStyles = _useState2[0],
    rerenderStyles = _useState2[1];

  // On theme update, wipe the map, which causes the below hook to recompute all styles
  var _useEuiTheme = useEuiTheme(),
    euiTheme = _useEuiTheme.euiTheme;
  useUpdateEffect(function () {
    rerenderStyles(new WeakMap());
  }, [euiTheme]);
  return ___EmotionJSX(EuiThemeMemoizedStylesContext.Provider, {
    value: componentStyles
  }, children);
};

/**
 * Internal util primarily responsible for getting the memoized styles (if they exist)
 * and if not, generating and setting the styles. DRYed out to facilitate usage
 * between both hook/function components and HOC/class components
 */
var getMemoizedStyles = function getMemoizedStyles(stylesGenerator, stylesMap, euiThemeContext) {
  if (!stylesGenerator.name) {
    emitEuiProviderWarning('Styles are memoized per function. Your style functions must be statically defined in order to not create a new map entry every rerender.');
  }
  var existingStyles = stylesMap.get(stylesGenerator);
  if (existingStyles) {
    return existingStyles;
  } else {
    var generatedStyles = stylesGenerator(euiThemeContext);
    stylesMap.set(stylesGenerator, generatedStyles);
    return generatedStyles;
  }
};

/**
 * Hook that memoizes the returned values of components style fns/generators
 * per-theme
 */
export var useEuiMemoizedStyles = function useEuiMemoizedStyles(stylesGenerator) {
  var memoizedStyles = useContext(EuiThemeMemoizedStylesContext);
  var euiThemeContext = useEuiTheme();
  var memoizedComponentStyles = useMemo(function () {
    return getMemoizedStyles(stylesGenerator, memoizedStyles, euiThemeContext);
  }, [stylesGenerator, memoizedStyles, euiThemeContext]);
  return memoizedComponentStyles;
};

/**
 * HOC for class components
 * Syntax is mostly copied from withEuiTheme HOC
 */

export var withEuiStylesMemoizer = function withEuiStylesMemoizer(Component) {
  var componentName = Component.displayName || Component.name || 'ComponentWithStylesMemoizer';
  var Render = function Render(props, ref) {
    var memoizedStyles = useContext(EuiThemeMemoizedStylesContext);
    var euiThemeContext = useEuiTheme();
    var stylesMemoizer = useCallback(function (stylesGenerator) {
      return getMemoizedStyles(stylesGenerator, memoizedStyles, euiThemeContext);
    }, [memoizedStyles, euiThemeContext]);
    return ___EmotionJSX(Component, _extends({
      stylesMemoizer: stylesMemoizer,
      ref: ref
    }, props));
  };
  var WithEuiStylesMemoizer = /*#__PURE__*/forwardRef(Render);
  WithEuiStylesMemoizer.displayName = componentName;
  return WithEuiStylesMemoizer;
};

/**
 * Render prop alternative for complex class components
 * Most useful for scenarios where a HOC may interfere with typing
 */
export var RenderWithEuiStylesMemoizer = function RenderWithEuiStylesMemoizer(_ref2) {
  var children = _ref2.children;
  var memoizedStyles = useContext(EuiThemeMemoizedStylesContext);
  var euiThemeContext = useEuiTheme();
  var stylesMemoizer = useCallback(function (stylesGenerator) {
    return getMemoizedStyles(stylesGenerator, memoizedStyles, euiThemeContext);
  }, [memoizedStyles, euiThemeContext]);
  return children(stylesMemoizer);
};