var _excluded = ["className", "insertComponent", "deleteComponent", "sameComponent", "beforeText", "afterText", "timeout"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useMemo } from 'react';
import Diff from 'text-diff';
import classNames from 'classnames';
import { useEuiTheme } from '../../services';
import { euiTextDiffStyles } from './text_diff.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var useEuiTextDiff = function useEuiTextDiff(_ref) {
  var className = _ref.className,
    _ref$insertComponent = _ref.insertComponent,
    insertComponent = _ref$insertComponent === void 0 ? 'ins' : _ref$insertComponent,
    _ref$deleteComponent = _ref.deleteComponent,
    deleteComponent = _ref$deleteComponent === void 0 ? 'del' : _ref$deleteComponent,
    sameComponent = _ref.sameComponent,
    _ref$beforeText = _ref.beforeText,
    beforeText = _ref$beforeText === void 0 ? '' : _ref$beforeText,
    _ref$afterText = _ref.afterText,
    afterText = _ref$afterText === void 0 ? '' : _ref$afterText,
    _ref$timeout = _ref.timeout,
    timeout = _ref$timeout === void 0 ? 0.1 : _ref$timeout,
    rest = _objectWithoutProperties(_ref, _excluded);
  var textDiff = useMemo(function () {
    var diff = new Diff({
      timeout: timeout
    }); // options may be passed to constructor

    return diff.main(beforeText, afterText);
  }, [beforeText, afterText, timeout]); // produces diff array

  var euiTheme = useEuiTheme();
  var styles = euiTextDiffStyles(euiTheme);
  var classes = classNames('euiTextDiff', className);
  var rendereredHtml = useMemo(function () {
    var html = [];
    if (textDiff) for (var i = 0; i < textDiff.length; i++) {
      var Element = void 0;
      var el = textDiff[i];
      if (el[0] === 1) Element = insertComponent;else if (el[0] === -1) Element = deleteComponent;else if (sameComponent) Element = sameComponent;
      if (Element) html.push(___EmotionJSX(Element, {
        key: i
      }, el[1]));else html.push(el[1]);
    }
    return html;
  }, [textDiff, deleteComponent, insertComponent, sameComponent]); // produces diff array

  // specifically defining the return type here as the
  // inferred type is not correct: array vs tuple
  var textDiffResult = [___EmotionJSX("span", _extends({
    css: styles.euiTextDiff,
    className: classes
  }, rest), rendereredHtml), textDiff];
  return textDiffResult;
};