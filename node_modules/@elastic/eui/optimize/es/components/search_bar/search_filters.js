import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { Component, Fragment } from 'react';
import { createFilter } from './filters';
import { EuiFilterGroup } from '../filter_group';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiSearchBarFilters = /*#__PURE__*/function (_Component) {
  function EuiSearchBarFilters() {
    _classCallCheck(this, EuiSearchBarFilters);
    return _callSuper(this, EuiSearchBarFilters, arguments);
  }
  _inherits(EuiSearchBarFilters, _Component);
  return _createClass(EuiSearchBarFilters, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        _this$props$filters = _this$props.filters,
        filters = _this$props$filters === void 0 ? [] : _this$props$filters,
        query = _this$props.query,
        onChange = _this$props.onChange;
      var items = [];
      filters.forEach(function (filterConfig, index) {
        if (filterConfig.available && !filterConfig.available()) {
          return;
        }
        var key = "filter_".concat(index);
        var control = createFilter(index, filterConfig, query, onChange);
        items.push(___EmotionJSX(Fragment, {
          key: key
        }, control));
      });
      return ___EmotionJSX(EuiFilterGroup, null, items);
    }
  }]);
}(Component);
_defineProperty(EuiSearchBarFilters, "defaultProps", {
  filters: []
});