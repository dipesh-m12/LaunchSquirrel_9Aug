"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiSideNavClass = exports.EuiSideNav = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _button = require("../button");
var _i18n = require("../i18n");
var _services = require("../../services");
var _responsive = require("../responsive");
var _side_nav_heading = require("./_side_nav_heading");
var _side_nav_item = require("./side_nav_item");
var _side_nav = require("./side_nav.styles");
var _react2 = require("@emotion/react");
var _excluded = ["id", "name", "isSelected", "items", "icon", "onClick", "href", "forceOpen"],
  _excluded2 = ["className", "items", "toggleOpenOnMobile", "isOpenOnMobile", "mobileTitle", "mobileBreakpoints", "renderItem", "truncate", "heading", "headingProps", "theme"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
var EuiSideNavClass = exports.EuiSideNavClass = /*#__PURE__*/function (_Component) {
  function EuiSideNavClass() {
    var _this;
    (0, _classCallCheck2.default)(this, EuiSideNavClass);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, EuiSideNavClass, [].concat(args));
    (0, _defineProperty2.default)(_this, "generateId", (0, _services.htmlIdGenerator)('euiSideNav'));
    (0, _defineProperty2.default)(_this, "isItemOpen", function (item) {
      // The developer can force the item to be open.
      if (item.forceOpen) {
        return true;
      }

      // Of course a selected item is open.
      if (item.isSelected) {
        return true;
      }

      // The item has to be open if it has a child that's open.
      if (item.items) {
        return item.items.some(_this.isItemOpen);
      }
      return false;
    });
    (0, _defineProperty2.default)(_this, "renderTree", function (items) {
      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var _this$props = _this.props,
        renderItem = _this$props.renderItem,
        truncate = _this$props.truncate;
      return items.map(function (item) {
        var id = item.id,
          name = item.name,
          isSelected = item.isSelected,
          childItems = item.items,
          icon = item.icon,
          onClick = item.onClick,
          href = item.href,
          forceOpen = item.forceOpen,
          rest = (0, _objectWithoutProperties2.default)(item, _excluded);

        // Root items are always open.
        var isOpen = depth === 0 ? true : _this.isItemOpen(item);
        var renderedItems;
        if (childItems) {
          renderedItems = _this.renderTree(childItems, depth + 1);
        }

        // Act as an accordion only if item is not linked but has children (and not the root)
        var childrenOnly = depth > 0 && !onClick && !href && !!childItems;
        return (0, _react2.jsx)(_side_nav_item.EuiSideNavItem, (0, _extends2.default)({
          isOpen: isOpen,
          isSelected: !childrenOnly && isSelected,
          isParent: !!childItems,
          icon: icon,
          onClick: onClick,
          href: href,
          items: renderedItems,
          key: id,
          depth: depth,
          renderItem: renderItem,
          truncate: truncate,
          childrenOnly: childrenOnly
        }, rest), name);
      });
    });
    return _this;
  }
  (0, _inherits2.default)(EuiSideNavClass, _Component);
  return (0, _createClass2.default)(EuiSideNavClass, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        className = _this$props2.className,
        items = _this$props2.items,
        toggleOpenOnMobile = _this$props2.toggleOpenOnMobile,
        isOpenOnMobile = _this$props2.isOpenOnMobile,
        mobileTitle = _this$props2.mobileTitle,
        mobileBreakpoints = _this$props2.mobileBreakpoints,
        renderItem = _this$props2.renderItem,
        truncate = _this$props2.truncate,
        heading = _this$props2.heading,
        headingProps = _this$props2.headingProps,
        theme = _this$props2.theme,
        rest = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);
      var classes = (0, _classnames.default)('euiSideNav', className, {
        'euiSideNav-isOpenMobile': isOpenOnMobile
      });
      var styles = (0, _side_nav.euiSideNavMobileStyles)(theme);
      var contentClasses = (0, _classnames.default)('euiSideNav__content');
      var sideNavContentId = this.generateId('content');
      var mobileContentStyles = [styles.content.euiSideNav__mobileContent, isOpenOnMobile ? styles.content.open : styles.content.hidden];
      var hasMobileVersion = mobileBreakpoints && mobileBreakpoints.length > 0;
      var mobileToggleText = mobileTitle || heading;
      var mobileHeadingUnset = {
        marginBlockEnd: 0,
        label: 'mobile'
      };
      var headingId = (headingProps === null || headingProps === void 0 ? void 0 : headingProps.id) || this.generateId('heading');
      var headingScreenReaderOnly = !!(headingProps !== null && headingProps !== void 0 && headingProps.screenReaderOnly);
      return (0, _react2.jsx)(_react.default.Fragment, null, hasMobileVersion && (0, _react2.jsx)(_responsive.EuiShowFor, {
        sizes: mobileBreakpoints || 'none'
      }, (0, _react2.jsx)("nav", (0, _extends2.default)({
        "aria-labelledby": headingId,
        className: classes
      }, rest), (0, _react2.jsx)(_side_nav_heading.EuiSideNavHeading, (0, _extends2.default)({
        id: headingId
      }, headingProps, {
        screenReaderOnly: false,
        css: mobileHeadingUnset
      }), (0, _react2.jsx)(_i18n.EuiI18n, {
        token: "euiSideNav.mobileToggleAriaLabel",
        default: "Toggle navigation"
      }, function (mobileToggleAriaLabel) {
        return (0, _react2.jsx)(_button.EuiButtonEmpty, {
          className: "euiSideNav__mobileToggle",
          css: styles.euiSideNav__mobileToggle,
          contentProps: {
            className: 'euiSideNav__mobileToggleContent',
            css: styles.euiSideNav__mobileToggleContent
          },
          onClick: toggleOpenOnMobile,
          iconType: "apps",
          iconSide: "right",
          "aria-controls": sideNavContentId,
          "aria-expanded": isOpenOnMobile,
          "aria-label": !mobileToggleText || headingScreenReaderOnly ? mobileToggleAriaLabel : undefined
        }, !headingScreenReaderOnly && mobileToggleText);
      })), (0, _react2.jsx)("div", {
        id: sideNavContentId,
        className: contentClasses,
        css: mobileContentStyles
      }, this.renderTree(items)))), (0, _react2.jsx)(_responsive.EuiHideFor, {
        sizes: mobileBreakpoints || 'none'
      }, (0, _react2.jsx)("nav", (0, _extends2.default)({
        "aria-labelledby": heading ? headingId : undefined,
        className: classes
      }, rest), heading && (0, _react2.jsx)(_side_nav_heading.EuiSideNavHeading, (0, _extends2.default)({
        id: headingId
      }, headingProps), heading), (0, _react2.jsx)("div", {
        id: sideNavContentId,
        className: contentClasses
      }, this.renderTree(items)))));
    }
  }]);
}(_react.Component);
(0, _defineProperty2.default)(EuiSideNavClass, "defaultProps", {
  items: [],
  mobileBreakpoints: ['xs', 's']
});
var EuiSideNav = exports.EuiSideNav = (0, _services.withEuiTheme)(EuiSideNavClass);